From 3df25e76a5e83a42b4db9527ac6ca3cc14c47ae6 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Sun, 13 Oct 2024 15:21:01 +0200
Subject: [PATCH] mesa: Implement GL_MESA_placed_allocation prototype
 extension.

---
 src/gallium/auxiliary/util/u_screen.c         |  1 +
 src/gallium/include/pipe/p_defines.h          |  1 +
 src/gallium/include/pipe/p_screen.h           |  4 ++
 src/gallium/targets/osmesa/osmesa-symbols.txt |  1 +
 src/mesa/main/bufferobj.c                     | 55 +++++++++++++++++++
 src/mesa/main/consts_exts.h                   |  1 +
 src/mesa/main/extensions_table.h              |  1 +
 src/mesa/state_tracker/st_extensions.c        |  1 +
 src/util/u_placed_callbacks.h                 | 50 +++++++++++++++++
 9 files changed, 115 insertions(+)
 create mode 100644 src/util/u_placed_callbacks.h

diff --git a/src/gallium/auxiliary/util/u_screen.c b/src/gallium/auxiliary/util/u_screen.c
index 2ff2289da8e6a..0b635e8f64c90 100644
--- a/src/gallium/auxiliary/util/u_screen.c
+++ b/src/gallium/auxiliary/util/u_screen.c
@@ -551,6 +551,7 @@ u_pipe_screen_get_param_defaults(struct pipe_screen *pscreen,
    case PIPE_CAP_ASTC_VOID_EXTENTS_NEED_DENORM_FLUSH:
    case PIPE_CAP_ASTC_DECODE_MODE:
    case PIPE_CAP_HAS_CONST_BW:
+   case PIPE_CAP_PLACED_ALLOCATION:
       return 0;
 
    case PIPE_CAP_TEXTURE_SAMPLER_INDEPENDENT:
diff --git a/src/gallium/include/pipe/p_defines.h b/src/gallium/include/pipe/p_defines.h
index 0f9e5f886a439..67d7e83d34409 100644
--- a/src/gallium/include/pipe/p_defines.h
+++ b/src/gallium/include/pipe/p_defines.h
@@ -987,6 +987,7 @@ enum pipe_cap
    PIPE_CAP_SHADER_SUBGROUP_SUPPORTED_FEATURES,
    PIPE_CAP_SHADER_SUBGROUP_QUAD_ALL_STAGES,
    PIPE_CAP_MULTIVIEW,
+   PIPE_CAP_PLACED_ALLOCATION,
    PIPE_CAP_LAST,
    /* XXX do not add caps after PIPE_CAP_LAST! */
 };
diff --git a/src/gallium/include/pipe/p_screen.h b/src/gallium/include/pipe/p_screen.h
index a2914f5bfa2c1..5e44c341c8fcf 100644
--- a/src/gallium/include/pipe/p_screen.h
+++ b/src/gallium/include/pipe/p_screen.h
@@ -40,6 +40,7 @@
 
 #include "util/compiler.h"
 #include "util/format/u_formats.h"
+#include "util/u_placed_callbacks.h"
 #include "pipe/p_defines.h"
 #include "pipe/p_video_enums.h"
 
@@ -855,6 +856,9 @@ struct pipe_screen {
     * is used.
     */
    struct pipe_screen* (*get_driver_pipe_screen)(struct pipe_screen *screen);
+
+   void (*set_placed_callbacks)(struct pipe_screen *screen,
+                                const struct util_placed_callbacks *cbs);
 };
 
 
diff --git a/src/gallium/targets/osmesa/osmesa-symbols.txt b/src/gallium/targets/osmesa/osmesa-symbols.txt
index 23fd1fa254786..9b13292414c70 100644
--- a/src/gallium/targets/osmesa/osmesa-symbols.txt
+++ b/src/gallium/targets/osmesa/osmesa-symbols.txt
@@ -935,6 +935,7 @@ glSecondaryColorPointer
 glSecondaryColorPointerEXT
 glSelectBuffer
 glSeparableFilter2D
+glSetPlacedAllocatorMESA
 glShadeModel
 glShaderBinary
 glShaderSource
diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index 6ef81bcbd1447..c5c2dc370bafc 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -3955,6 +3955,61 @@ _mesa_MapNamedBufferEXT(GLuint buffer, GLenum access)
                            "glMapNamedBufferEXT");
 }
 
+// should probably in some screen-equivalent object i didn't find
+static GLplacedMapMESA placed_map_cb;
+static GLplacedUnmapMESA placed_unmap_cb;
+
+static void* _mesa_placed_map(unsigned int size,
+                              void **token)
+{
+   void *mapping;
+
+   if (placed_map_cb && (mapping = placed_map_cb(size)))
+   {
+      *token = placed_unmap_cb;
+      return mapping;
+   }
+
+   return NULL;
+}
+
+static void _mesa_placed_unmap(void *mapping, unsigned int size, void *token)
+{
+   GLplacedUnmapMESA matched_unmap = (GLplacedUnmapMESA) token;
+
+   if (matched_unmap)
+      matched_unmap(mapping, size);
+}
+
+static void set_placed_allocator(struct gl_context *ctx, GLplacedMapMESA placedMap, GLplacedUnmapMESA placedUnmap)
+{
+   struct util_placed_callbacks cbs = {
+      _mesa_placed_map,
+      _mesa_placed_unmap,
+   };
+
+   ctx->pipe->screen->set_placed_callbacks(ctx->pipe->screen, &cbs);
+
+   placed_map_cb = placedMap;
+   placed_unmap_cb = placedUnmap;
+}
+
+void GLAPIENTRY
+_mesa_SetPlacedAllocatorMESA(GLplacedMapMESA placedMap, GLplacedUnmapMESA placedUnmap)
+{
+   GET_CURRENT_CONTEXT(ctx);
+
+   set_placed_allocator(ctx, placedMap, placedUnmap);
+}
+
+void GLAPIENTRY
+_mesa_SetPlacedAllocatorMESA_no_error(GLplacedMapMESA placedMap, GLplacedUnmapMESA placedUnmap)
+{
+   GET_CURRENT_CONTEXT(ctx);
+
+   set_placed_allocator(ctx, placedMap, placedUnmap);
+}
+
 static void
 flush_mapped_buffer_range(struct gl_context *ctx,
                           struct gl_buffer_object *bufObj,
diff --git a/src/mesa/main/consts_exts.h b/src/mesa/main/consts_exts.h
index 5359ec357f4e5..5e4904dfe088d 100644
--- a/src/mesa/main/consts_exts.h
+++ b/src/mesa/main/consts_exts.h
@@ -257,6 +257,7 @@ struct gl_extensions
    GLboolean KHR_texture_compression_astc_ldr;
    GLboolean KHR_texture_compression_astc_sliced_3d;
    GLboolean MESA_framebuffer_flip_y;
+   GLboolean MESA_placed_allocation;
    GLboolean MESA_texture_const_bandwidth;
    GLboolean MESA_pack_invert;
    GLboolean MESA_tile_raster_order;
diff --git a/src/mesa/main/extensions_table.h b/src/mesa/main/extensions_table.h
index 8c9117d60dd5c..8ab71e9e55e15 100644
--- a/src/mesa/main/extensions_table.h
+++ b/src/mesa/main/extensions_table.h
@@ -392,6 +392,7 @@ EXT(MESA_pack_invert                        , MESA_pack_invert
 EXT(MESA_sampler_objects                    , dummy_true                             ,  x ,  x ,  x , ES2, 2019)
 EXT(MESA_shader_integer_functions           , MESA_shader_integer_functions          , GLL, GLC,  x ,  30, 2016)
 EXT(MESA_texture_const_bandwidth            , MESA_texture_const_bandwidth           , GLL, GLC,  x , ES2, 2023)
+EXT(MESA_placed_allocation                  , MESA_placed_allocation                 , GLL, GLC,  x ,  x , 2024)
 EXT(MESA_texture_signed_rgba                , EXT_texture_snorm                      , GLL, GLC,  x ,  x , 2009)
 EXT(MESA_tile_raster_order                  , MESA_tile_raster_order                 , GLL, GLC,  x , ES2, 2017)
 EXT(MESA_window_pos                         , MESA_window_pos                        , GLL,  x ,  x ,  x , 2000)
diff --git a/src/mesa/state_tracker/st_extensions.c b/src/mesa/state_tracker/st_extensions.c
index a139521143f7e..e1a82d7d398fa 100644
--- a/src/mesa/state_tracker/st_extensions.c
+++ b/src/mesa/state_tracker/st_extensions.c
@@ -899,6 +899,7 @@ void st_init_extensions(struct pipe_screen *screen,
       { o(INTEL_blackhole_render),           PIPE_CAP_FRONTEND_NOOP                    },
       { o(ARM_shader_framebuffer_fetch_depth_stencil), PIPE_CAP_FBFETCH_ZS             },
       { o(MESA_texture_const_bandwidth),     PIPE_CAP_HAS_CONST_BW                     },
+      { o(MESA_placed_allocation),           PIPE_CAP_PLACED_ALLOCATION                },
    };
 
    /* Required: render target and sampler support */
diff --git a/src/util/u_placed_callbacks.h b/src/util/u_placed_callbacks.h
new file mode 100644
index 0000000000000..713a6ceeaf222
--- /dev/null
+++ b/src/util/u_placed_callbacks.h
@@ -0,0 +1,50 @@
+#ifndef _U_PLACED_CALLBACKS_H
+#define _U_PLACED_CALLBACKS_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* modelled after u_debug */
+struct util_placed_callbacks
+{
+   /**
+    * Callback for the driver get a placed allocation from the frontend
+    *
+    * \param data   user-supplied context pointer (holds GL_placed_allocator callbacks), not the be confused for mapping data
+    * \param size   desired size of the placed allocation
+    * \param token  pointer to a token that the driver must pass to placed_unmap (holds unmap callback, which may have been switched out)
+    * 
+    * \return placed mapping address
+    */
+   void* (*placed_map)(unsigned int size,
+                       void **token);
+
+   /**
+    * Callback for the driver get a placed allocation from the frontend
+    *
+    * \param token mapping token recieved from placed_map in order to call correct unmap
+    * 
+    * \return placed mapping address
+    */
+   void (*placed_unmap)(void *mapping, unsigned int size, void *token);
+};
+
+static inline void *u_placed_map(struct util_placed_callbacks *cbs, unsigned int size, void **token)
+{
+   if (cbs->placed_map) return cbs->placed_map(size, token);
+   return NULL;
+}
+
+static inline void u_placed_unmap(struct util_placed_callbacks *cbs, void *mapping, unsigned int size, void *token)
+{
+   if (cbs->placed_unmap) return cbs->placed_unmap(mapping, size, token);
+}
+
+
+
+#ifdef __cplusplus
+} // extern "C" {
+#endif
+
+#endif /* _U_PLACED_CALLBACKS_H */
-- 
GitLab

